#importação das dependencias necessarias
from flask import Flask, render_template, redirect, url_for, request, flash
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user

#configuração do aplicativo e banco de dados
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://halbert:0987654321@localhost/flask_db'
app.config['SECRET_KEY'] = '@@1a2b334casa@primeiroprojeto_flask'
db = SQLAlchemy(app)

#configurando flask login
login_manager = LoginManager(app)
login_manager.login_view = 'login'

class Usuario(UserMixin, db.Model):
  id = db.Column(db.Integer, primary_key=True)
  nome = db.Column(db.String(100), nullable=False)
  email = db.Column(db.String(100), unique=True, nullable=False)
  senha = db.Column(db.String(100), nullable=False)

#callback para carregar o usuario a partir da ID
@login_manager.user_loader
def load_user(user_id):
  return Usuario.query.get(int(user_id))

#rotas de login
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == "POST":
        email = request.form["email"]
        senha = request.form["senha"]
        usuario = Usuario.query.filter_by(email=email).first()
        if usuario and usuario.senha == senha:
           login_user(usuario)
           flash('Login realizado com sucesso!')
        else:
           flash("Usuário ou Senha inválidos!")

        return render_template('login.html')

#rota de logout
@app.route("/logout")
@login_required
def logout():
   logout_user()
   flash('Logout Bem sucedido! ')
   return redirect(url_for('index'))

#rota protegiada que requer autenticação
# A rota perfil é acessível apenas para usuários autenticados, e o objeto current_user fornecido pelo Flask-Login contém informações sobre o usuário atualmente autenticado.
@app.route('/perfil')
@login_required
def perfil():
    return render_template('perfil.html', usuario=current_user)

if __name__ == '__main__dfs':
   app.run(debug=True)